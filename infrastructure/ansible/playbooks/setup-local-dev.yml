---
- name: Setup Local Development Environment
  hosts: localhost
  connection: local
  # Run most tasks with sudo, but NVM tasks need to run as the user
  become: false
  gather_facts: true

  vars:
    # Define desired versions (adjust as needed)
    node_version: "24" # Use NVM alias for latest LTS
    nvm_version: "0.39.7" # Check latest NVM version
    pnpm_version: "10.11.0" # Check latest stable versio
    opentofu_version: "1.9.1" # Check latest stable version
    vault_version: "1.15.2" # HashiCorp Vault LTS
    kubectl_version: "1.29.3" # Check latest stable version
    actionlint_version: "latest" # Check latest stable version
    # Helm version is usually handled by the install script (latest v3)
    # Determine NVM directory (adjust if user modifies $XDG_CONFIG_HOME)
    nvm_dir: "{{ ansible_env.HOME }}/.nvm"
    nvm_script: "{{ nvm_dir }}/nvm.sh"

  tasks:
    # ===========================================
    # Tasks requiring root/sudo privileges
    # ===========================================
    - name: Run tasks requiring sudo
      become: true
      block:
        - name: Update package cache (Debian/Ubuntu)
          ansible.builtin.apt:
            update_cache: true
            cache_valid_time: 3600
            force_apt_get: true
          register: apt_update
          until: apt_update is succeeded
          retries: 3
          delay: 10
          ignore_errors: true
          failed_when: false
          when: ansible_os_family == "Debian"
          changed_when: false # Don't report cache updates as changes

        - name: Install common prerequisites (curl, git, unzip)
          ansible.builtin.package:
            name: ["curl", "git", "unzip"] # Added git as NVM install script might use it
            state: present

        # --- OpenTofu ---
        - name: Check if OpenTofu is installed and matches version
          ansible.builtin.command: "tofu --version"
          register: tofu_check
          ignore_errors: true
          changed_when: false

        - name: Download OpenTofu binary
          ansible.builtin.get_url:
            url: "https://github.com/opentofu/opentofu/releases/download/v{{ opentofu_version }}/tofu_{{ opentofu_version }}_linux_amd64.zip"
            dest: "/tmp/tofu_{{ opentofu_version }}_linux_amd64.zip"
            mode: '0644'
          when:
            - ansible_os_family != "Darwin"
            - tofu_check.rc != 0 or opentofu_version not in tofu_check.stdout

        - name: Download OpenTofu binary (macOS)
          ansible.builtin.get_url:
            url: "https://github.com/opentofu/opentofu/releases/download/v{{ opentofu_version }}/tofu_{{ opentofu_version }}_darwin_amd64.zip"
            dest: "/tmp/tofu_{{ opentofu_version }}_darwin_amd64.zip"
            mode: '0644'
          when:
            - ansible_os_family == "Darwin"
            - tofu_check.rc != 0 or opentofu_version not in tofu_check.stdout

        - name: Unzip OpenTofu binary to /usr/local/bin
          ansible.builtin.unarchive:
            src: "/tmp/tofu_{{ opentofu_version }}_{{ (ansible_os_family == 'Darwin') | ternary('darwin', 'linux') }}_amd64.zip"
            dest: "/usr/local/bin/"
            remote_src: true
            mode: '0755'
            owner: root
            group: root
          when: tofu_check.rc != 0 or opentofu_version not in tofu_check.stdout

        - name: Clean up OpenTofu zip file
          ansible.builtin.file:
            path: "/tmp/tofu_{{ opentofu_version }}_{{ (ansible_os_family == 'Darwin') | ternary('darwin', 'linux') }}_amd64.zip"
            state: absent
          when: tofu_check.rc != 0 or opentofu_version not in tofu_check.stdout

        # --- Kubectl ---
        - name: Check if kubectl exists
          ansible.builtin.stat:
            path: /usr/local/bin/kubectl
          register: kubectl_stat

        - name: Download kubectl binary
          ansible.builtin.get_url:
            url: "https://dl.k8s.io/release/v{{ kubectl_version }}/bin/linux/amd64/kubectl"
            dest: /usr/local/bin/kubectl
            mode: '0755'
            owner: root
            group: root
          when: ansible_os_family != "Darwin" and not kubectl_stat.stat.exists # Assuming Linux for now

        # Add macOS kubectl download if needed later

        # --- Helm ---
        - name: Check if helm exists
          ansible.builtin.stat:
            path: /usr/local/bin/helm
          register: helm_stat

        - name: Download Helm install script
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            dest: /tmp/get_helm.sh
            mode: '0755'
          when: not helm_stat.stat.exists

        - name: Install Helm using script
          ansible.builtin.command:
            cmd: /tmp/get_helm.sh
            creates: /usr/local/bin/helm # Make it idempotent
          changed_when: true # Assume changed if script runs
          when: not helm_stat.stat.exists

        - name: Clean up Helm install script
          ansible.builtin.file:
            path: /tmp/get_helm.sh
            state: absent
          when: not helm_stat.stat.exists # Only clean up if we downloaded it

       # --- Vault CLI ---
    - name: Check if Vault is installed
      ansible.builtin.command: vault --version
      register: vault_check
      ignore_errors: true
      changed_when: false

    - name: Download Vault binary (Linux)
      ansible.builtin.get_url:
        url: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_amd64.zip"
        dest: "/tmp/vault_{{ vault_version }}_linux_amd64.zip"
        mode: '0644'
      when: ansible_os_family != "Darwin" and vault_check.rc != 0

    - name: Download Vault binary (macOS)
      ansible.builtin.get_url:
        url: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_darwin_amd64.zip"
        dest: "/tmp/vault_{{ vault_version }}_darwin_amd64.zip"
        mode: '0644'
      when: ansible_os_family == "Darwin" and vault_check.rc != 0

    - name: Debug Vault installation variables
      ansible.builtin.debug:
        msg:
          - "Vault Version: {{ vault_version }}"
          - "OS Family: {{ ansible_os_family }}"
          - "Vault Check Result: {{ vault_check }}"
          - "Expected Zip Path: /tmp/vault_{{ vault_version }}_{{ (ansible_os_family == 'Darwin') | ternary('darwin', 'linux') }}_amd64.zip"
      when: vault_check.rc != 0 # Only show debug if we intend to install

    - name: Unzip Vault binary
      become: true # Explicitly add become here as well
      ansible.builtin.unarchive:
        src: "/tmp/vault_{{ vault_version }}_{{ (ansible_os_family == 'Darwin') | ternary('darwin', 'linux') }}_amd64.zip"
        dest: "/usr/local/bin/"
        remote_src: true
        mode: '0755'
        owner: root
        group: root
      when: vault_check.rc != 0

    - name: Clean up Vault zip file
      ansible.builtin.file:
        path: "/tmp/vault_{{ vault_version }}_{{ (ansible_os_family == 'Darwin') | ternary('darwin', 'linux') }}_amd64.zip"
        state: absent
      when: vault_check.rc != 0

    # --- TFLint ---
    - name: Check if TFLint is installed (Linux)
      ansible.builtin.command: tflint --version
      register: tflint_check
      ignore_errors: true
      changed_when: false
      when: ansible_system == "Linux"

    - name: Download TFLint install script (Linux)
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh
        dest: /tmp/install_tflint.sh
        mode: '0755'
      when: ansible_system == "Linux" and tflint_check.rc != 0

    - name: Install TFLint using script (Linux)
      become: true
      ansible.builtin.command:
        cmd: bash /tmp/install_tflint.sh
        creates: /usr/local/bin/tflint # Assumes script installs to /usr/local/bin
      changed_when: true # Assume changed if script runs
      when: ansible_system == "Linux" and tflint_check.rc != 0

    - name: Clean up TFLint install script (Linux)
      ansible.builtin.file:
        path: /tmp/install_tflint.sh
        state: absent
      when: ansible_system == "Linux" and tflint_check.rc != 0 # Only clean up if we downloaded it


    # --- Python and pip  virtualenv
    - name: Check Python 3 installation
      ansible.builtin.command: python3 --version
      register: python_check
      ignore_errors: true
      changed_when: false

    - name: Install Python 3 and virtualenv support
      become: true
      ansible.builtin.package:
        name:
          - python3
          - python3-venv
        state: present
      when:
        - ansible_os_family == "Debian"
        - python_check.rc != 0

    # --- Checkov ---
    - name: Check if Checkov is already installed
      ansible.builtin.command: checkov --version
      register: checkov_check
      ignore_errors: true
      changed_when: false

    - name: Create Checkov virtual environment
      become: true
      ansible.builtin.command:
        cmd: python3 -m venv /opt/checkov-venv
        creates: /opt/checkov-venv/bin/activate
      when: checkov_check.rc != 0

    - name: Install Checkov in virtual environment
      become: true
      ansible.builtin.pip:
        name: checkov
        state: present
        virtualenv: /opt/checkov-venv
        virtualenv_command: python3 -m venv
      when: checkov_check.rc != 0

    - name: Create checkov symlink
      become: true
      ansible.builtin.file:
        src: /opt/checkov-venv/bin/checkov
        dest: /usr/local/bin/checkov
        state: link
        force: true
        mode: '0755'
      when: checkov_check.rc != 0

# --- Actionlint ---
    - name: Check if actionlint is installed
      ansible.builtin.command: actionlint --version
      register: actionlint_check
      ignore_errors: true
      changed_when: false

    - name: Download actionlint install script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash
        dest: /tmp/download-actionlint.bash
        mode: '0755'
      when: actionlint_check.rc != 0

    - name: Install actionlint using script
      become: true
      ansible.builtin.command:
        cmd: bash /tmp/download-actionlint.bash {{ actionlint_version }} /usr/local/bin
        creates: /usr/local/bin/actionlint # Assumes script installs to /usr/local/bin
      changed_when: true # Assume changed if script runs
      when: actionlint_check.rc != 0

    - name: Clean up actionlint install script
      ansible.builtin.file:
        path: /tmp/download-actionlint.bash
        state: absent
      when: actionlint_check.rc != 0 # Only clean up if we downloaded it
    # ===========================================
    # NVM and Node.js Installation (as user)
    # ===========================================
    - name: Check if NVM script exists
      ansible.builtin.stat:
        path: "{{ nvm_script }}"
      register: nvm_stat

    - name: Download NVM install script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/nvm-sh/nvm/v{{ nvm_version }}/install.sh
        dest: /tmp/install_nvm.sh
        mode: '0755'
      when: not nvm_stat.stat.exists

    - name: Run NVM install script
      ansible.builtin.command:
        cmd: bash /tmp/install_nvm.sh
        creates: "{{ nvm_script }}" # Makes the task idempotent
      when: not nvm_stat.stat.exists
      changed_when: true # Assume changed if NVM wasn't installed

    - name: Install Node.js using NVM and enable corepack (version {{ node_version }})
      ansible.builtin.shell: |
        set -e
        . "{{ nvm_script }}"
        nvm install {{ node_version }}
        nvm alias default {{ node_version }}
        # Ensure corepack is enabled with the NVM-installed Node
        corepack enable
      args: {} # Removed 'creates' as exact version path isn't known with lts/*
      changed_when: true # Assume changed if NVM install runs (it's idempotent for aliases)

    - name: Check if pnpm is installed and matches version
      ansible.builtin.shell: |
        set -e
        . "{{ nvm_script }}"
        pnpm --version
      register: pnpm_check
      ignore_errors: true
      changed_when: false

    - name: Install pnpm globally using the NVM-managed Node.js
      ansible.builtin.shell: |
        set -e
        . "{{ nvm_script }}"
        npm install -g pnpm@{{ pnpm_version }}
      when: pnpm_check.rc != 0 or pnpm_version not in pnpm_check.stdout
      changed_when: true # Assume changed if install runs

    # ===========================================
    # Final Message
    # ===========================================
    - name: Display final message
      ansible.builtin.debug:
        msg: "Development environment tools (NVM, Node.js, pnpm, OpenTofu, Vault, kubectl, Helm, TFLint, Checkov) should now be installed/updated."
